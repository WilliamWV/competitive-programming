#include "../include/graph.h"

using namespace std;

int test_graph(){
    // Test graph:
    //       3 -[1]- 4 -[32]- 8
    //       |[4]      _[11]_/
    //       5--[3]--0/-[2]-1 -[4]- 7
    //              |[1]    |[1]
    //              2--[7]--6
    
    Graph* t_graph = init_graph(9);
    add_edge(t_graph, 0, 1, 2);
    add_edge(t_graph, 0, 5, 3);
    add_edge(t_graph, 0, 2, 1);
    add_edge(t_graph, 0, 8, 11);
    add_edge(t_graph, 1, 7, 4);
    add_edge(t_graph, 1, 6, 1);
    add_edge(t_graph, 2, 6, 7);
    add_edge(t_graph, 3, 4, 1);
    add_edge(t_graph, 3, 5, 4);
    add_edge(t_graph, 4, 8, 32);
    
    cout<<"Graph mounted"<<endl;
    print_graph(t_graph);
    dfs(t_graph, 0);
    bfs(t_graph, 0);

    cout<<"Distance between 0 and 1 = "<<dijkstra(t_graph, 0, 1)<<endl;
    cout<<"Distance between 0 and 8 = "<<dijkstra(t_graph, 0, 8)<<endl;
    cout<<"Distance between 0 and 2 = "<<dijkstra(t_graph, 0, 2)<<endl;
    cout<<"Distance between 4 and 8 = "<<dijkstra(t_graph, 4, 8)<<endl;
    cout<<"Distance between 3 and 6 = "<<dijkstra(t_graph, 3, 6)<<endl;
    cout<<"Distance between 1 and 7 = "<<dijkstra(t_graph, 1, 7)<<endl;
    cout<<"Distance between 5 and 2 = "<<dijkstra(t_graph, 5, 2)<<endl;
    
    print_vec(complete_dijkstra(t_graph, 1), "Distance to all nodes from 1: ");

    cout<<"Graph of shortest path generated by dijkstra from 5: "<<endl;
    print_graph(dijkstra_graph(t_graph, 5));

    cout<<"The cost of the minimum spamming tree is: "<<kruskal_cost(t_graph)<<endl;
    cout<<"The MST graph is: ";
    print_graph(mst(t_graph));

    print_mat(floyd_warshall(t_graph), "min distance between every node");

    deallocate_all();

    return 0;

}
